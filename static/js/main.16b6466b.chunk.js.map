{"version":3,"sources":["assets/contemplative-reptile.jpg","components/header/Header.tsx","components/mediaGallery/MediaCard.tsx","components/mediaGallery/mockedMedia.js","components/mediaGallery/MediaGallery.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","Header","_React$Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","react","index_es","color","position","variant","React","MediaCard","withStyles","card","maxWidth","media","height","props","classes","image","description","react_default","a","createElement","className","raised","title","gutterBottom","component","size","mockedMedia","id","v4","require","styledComponent","root","flexGrow","margin","container","spacing","justify","mediaList","map","item","App","Fragment","Header_Header","style","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.16b6466b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/contemplative-reptile.34dfeed2.jpg\";","import * as React from 'react';\nimport { AppBar, Toolbar, Typography } from '@material-ui/core';\n// import { NavBar } from \"./NavBar\"\n\nexport class Header extends React.Component {\n  render() {\n    return (\n      <AppBar color=\"primary\" position=\"static\">\n        <Toolbar>\n          <Typography variant=\"title\" color=\"inherit\">\n            Guven Kemal\n          </Typography>\n          {/* <NavBar /> */}\n        </Toolbar>\n      </AppBar>\n    );\n  }\n}\n","import React from \"react\";\nimport {\n  CardActionArea,\n  Card,\n  CardMedia,\n  CardContent,\n  Typography,\n  CardActions,\n  Button,\n  withStyles\n} from \"@material-ui/core\";\n\nconst styles = {\n  card: {\n    maxWidth: 345\n  },\n  media: {\n    height: 140\n  }\n};\n\ntype P = {\n  classes: {\n    card: string;\n    media: string;\n  };\n  description: string;\n  image: string;\n};\n\nexport const MediaCard = withStyles(styles)((props: P) => {\n  const { classes, image, description } = props;\n  return (\n    <Card className={classes.card} raised>\n      <CardActionArea>\n        <CardMedia\n          className={classes.media}\n          image={image}\n          title=\"Contemplative Reptile\"\n        />\n        <CardContent>\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\n            Lizard\n          </Typography>\n          <Typography component=\"p\">{description}</Typography>\n        </CardContent>\n      </CardActionArea>\n      <CardActions>\n        <Button size=\"small\" color=\"primary\">\n          Share\n        </Button>\n        <Button size=\"small\" color=\"primary\">\n          Learn More\n        </Button>\n      </CardActions>\n    </Card>\n  );\n});\n","import { v4 } from 'uuid';\n\nexport default [\n  {\n    id: v4(),\n    image: require('../../assets/contemplative-reptile.jpg'),\n    description:\n      'Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica'\n  },\n  {\n    id: v4(),\n    image: require('../../assets/contemplative-reptile.jpg'),\n    description:\n      'Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica'\n  },\n  {\n    id: v4(),\n    image: require('../../assets/contemplative-reptile.jpg'),\n    description:\n      'Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica'\n  },\n  {\n    id: v4(),\n    image: require('../../assets/contemplative-reptile.jpg'),\n    description:\n      'Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica'\n  },\n  {\n    id: v4(),\n    image: require('../../assets/contemplative-reptile.jpg'),\n    description:\n      'Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica'\n  }\n];\n","import * as React from 'react';\nimport { MediaCard } from './MediaCard';\nimport { Grid, withStyles } from '@material-ui/core';\nimport mediaList from './mockedMedia';\n\nconst styles = {\n  root: {\n    flexGrow: 1,\n    margin: '30px 0'\n  }\n};\n\ntype P = {\n  classes: {\n    root: typeof styles.root;\n  };\n};\n\nconst MediaGallery = (props: P) => {\n  const { classes } = props;\n  return (\n    <div>\n      <Grid container spacing={24} justify=\"center\" className={classes.root}>\n        {mediaList.map(media => (\n          <Grid item>\n            <MediaCard\n              key={media.id}\n              image={media.image}\n              description={media.description}\n            />\n          </Grid>\n        ))}\n      </Grid>\n    </div>\n  );\n};\n\nconst styledComponent = withStyles(styles)(MediaGallery);\nexport { styledComponent as MediaGallery };\n","import React, { Component } from 'react';\nimport { Header } from './components/header/Header';\nimport { MediaGallery } from './components/mediaGallery/MediaGallery';\nimport { CssBaseline } from '@material-ui/core';\n\nclass App extends Component {\n  render() {\n    return (\n      <>\n        <CssBaseline />\n        <Header />\n        <div style={{ maxWidth: '1440px', margin: '0 auto' }}>\n          <MediaGallery />\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}