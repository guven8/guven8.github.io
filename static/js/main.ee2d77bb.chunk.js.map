{"version":3,"sources":["assets/contemplative-reptile.jpg","components/header/Header.tsx","components/mediaGallery/MediaCard.tsx","components/mediaGallery/mockedMedia.js","components/mediaGallery/MediaGallery.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","Header","withStyles","root","flexGrow","grow","menuButton","marginLeft","marginRight","list","width","avatar","margin","_dec","_class","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggleSideMenu","setState","sideMenuOpen","state","inherits","createClass","key","value","classes","sideList","react","className","index_es","map","text","index","button","MoveToInbox_default","a","Mail_default","primary","color","position","open","onClose","tabIndex","role","onClick","onKeyDown","aria-label","Menu_default","variant","React","MediaCard","card","maxWidth","media","height","image","description","react_default","createElement","raised","title","gutterBottom","component","size","mockedMedia","id","v4","require","styledComponent","container","spacing","justify","mediaList","item","App","Fragment","Header_Header","style","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ee2d77bb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/contemplative-reptile.34dfeed2.jpg\";","import * as React from 'react';\nimport {\n  AppBar,\n  Toolbar,\n  Typography,\n  withStyles,\n  IconButton,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  Divider,\n  Drawer\n} from '@material-ui/core';\n// import { NavBar } from \"./NavBar\"\nimport MenuIcon from '@material-ui/icons/Menu';\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\nimport MailIcon from '@material-ui/icons/Mail';\n\nconst styles = {\n  root: {\n    flexGrow: 1\n  },\n  grow: {\n    flexGrow: 1\n  },\n  menuButton: {\n    marginLeft: -12,\n    marginRight: 20\n  },\n  list: {\n    width: 250\n  },\n  avatar: {\n    margin: 10\n  }\n};\n\ntype P = {\n  classes: any;\n};\n\ntype S = {\n  sideMenuOpen: boolean;\n};\n\n@withStyles(styles)\nexport class Header extends React.Component<P, S> {\n  constructor(props: P) {\n    super(props);\n    this.state = { sideMenuOpen: false };\n  }\n\n  private toggleSideMenu = () => this.setState({ sideMenuOpen: !this.state.sideMenuOpen });\n\n  render() {\n    const { classes } = this.props;\n\n    const sideList = (\n      <div className={classes.list}>\n        <List>\n          {['Inbox', 'Starred', 'Send email', 'Drafts'].map((text, index) => (\n            <ListItem button key={text}>\n              <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\n              <ListItemText primary={text} />\n            </ListItem>\n          ))}\n        </List>\n        <Divider />\n        <List>\n          {['All mail', 'Trash', 'Spam'].map((text, index) => (\n            <ListItem button key={text}>\n              <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\n              <ListItemText primary={text} />\n            </ListItem>\n          ))}\n        </List>\n      </div>\n    );\n\n    return (\n      <AppBar color=\"primary\" position=\"static\">\n        <Drawer open={this.state.sideMenuOpen} onClose={this.toggleSideMenu}>\n          <div\n            tabIndex={0}\n            role=\"button\"\n            onClick={this.toggleSideMenu}\n            onKeyDown={this.toggleSideMenu}\n          >\n            {sideList}\n          </div>\n        </Drawer>\n        <Toolbar>\n          <IconButton\n            className={classes.menuButton}\n            color=\"inherit\"\n            aria-label=\"Menu\"\n            onClick={this.toggleSideMenu}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"title\" color=\"inherit\">\n            Guven Kemal Portfolio\n          </Typography>\n          {/* <NavBar /> */}\n        </Toolbar>\n      </AppBar>\n    );\n  }\n}\n","import React from \"react\";\nimport {\n  CardActionArea,\n  Card,\n  CardMedia,\n  CardContent,\n  Typography,\n  CardActions,\n  Button,\n  withStyles\n} from \"@material-ui/core\";\n\nconst styles = {\n  card: {\n    maxWidth: 345\n  },\n  media: {\n    height: 140\n  }\n};\n\ntype P = {\n  classes: {\n    card: string;\n    media: string;\n  };\n  description: string;\n  image: string;\n};\n\nexport const MediaCard = withStyles(styles)((props: P) => {\n  const { classes, image, description } = props;\n  return (\n    <Card className={classes.card} raised>\n      <CardActionArea>\n        <CardMedia\n          className={classes.media}\n          image={image}\n          title=\"Contemplative Reptile\"\n        />\n        <CardContent>\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\n            Lizard\n          </Typography>\n          <Typography component=\"p\">{description}</Typography>\n        </CardContent>\n      </CardActionArea>\n      <CardActions>\n        <Button size=\"small\" color=\"primary\">\n          Share\n        </Button>\n        <Button size=\"small\" color=\"primary\">\n          Learn More\n        </Button>\n      </CardActions>\n    </Card>\n  );\n});\n","import { v4 } from 'uuid';\n\nexport default [\n  {\n    id: v4(),\n    image: require('../../assets/contemplative-reptile.jpg'),\n    description:\n      'Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica'\n  },\n  {\n    id: v4(),\n    image: require('../../assets/contemplative-reptile.jpg'),\n    description:\n      'Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica'\n  },\n  {\n    id: v4(),\n    image: require('../../assets/contemplative-reptile.jpg'),\n    description:\n      'Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica'\n  },\n  {\n    id: v4(),\n    image: require('../../assets/contemplative-reptile.jpg'),\n    description:\n      'Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica'\n  },\n  {\n    id: v4(),\n    image: require('../../assets/contemplative-reptile.jpg'),\n    description:\n      'Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica'\n  }\n];\n","import * as React from 'react';\nimport { MediaCard } from './MediaCard';\nimport { Grid, withStyles } from '@material-ui/core';\nimport mediaList from './mockedMedia';\n\nconst styles = {\n  root: {\n    flexGrow: 1,\n    margin: '30px 0'\n  }\n};\n\ntype P = {\n  classes: {\n    root: typeof styles.root;\n  };\n};\n\nconst MediaGallery = (props: P) => {\n  const { classes } = props;\n  return (\n    <div>\n      <Grid container spacing={24} justify=\"center\" className={classes.root}>\n        {mediaList.map(media => (\n          <Grid item>\n            <MediaCard\n              key={media.id}\n              image={media.image}\n              description={media.description}\n            />\n          </Grid>\n        ))}\n      </Grid>\n    </div>\n  );\n};\n\nconst styledComponent = withStyles(styles)(MediaGallery);\nexport { styledComponent as MediaGallery };\n","import React, { Component } from 'react';\nimport { Header } from './components/header/Header';\nimport { MediaGallery } from './components/mediaGallery/MediaGallery';\nimport { CssBaseline } from '@material-ui/core';\n\nclass App extends Component {\n  render() {\n    return (\n      <>\n        <CssBaseline />\n        <Header />\n        <div style={{ maxWidth: '1440px', margin: '0 auto' }}>\n          <MediaGallery />\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}