{"version":3,"sources":["assets/contemplative-reptile.jpg","components/header/Header.js","components/mediaGallery/MediaCard.js","components/mediaGallery/mockedMedia.js","components/mediaGallery/MediaGallery.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","withStyles","root","flexGrow","grow","menuButton","marginLeft","marginRight","list","width","avatar","margin","_ref","classes","_useState","useState","_useState2","Object","slicedToArray","sideMenuOpen","setSideMenuOpen","toggleSideMenu","sideList","react_default","a","createElement","className","index_es","map","text","index","button","key","MoveToInbox_default","Mail_default","primary","color","position","open","onClose","tabIndex","role","onClick","onKeyDown","aria-label","Menu_default","variant","MediaCard","card","maxWidth","media","height","image","description","raised","title","gutterBottom","component","size","mockedMedia","require","MediaGallery","react","container","justify","mediaList","i","item","App","Fragment","style","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b9792085.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/contemplative-reptile.34dfeed2.jpg\";","import React, { useState } from 'react'\nimport {\n  AppBar,\n  Toolbar,\n  Typography,\n  withStyles,\n  IconButton,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  Divider,\n  Drawer\n} from '@material-ui/core'\n// import { NavBar } from \"./NavBar\"\nimport MenuIcon from '@material-ui/icons/Menu'\nimport InboxIcon from '@material-ui/icons/MoveToInbox'\nimport MailIcon from '@material-ui/icons/Mail'\n\nconst styles = {\n  root: {\n    flexGrow: 1\n  },\n  grow: {\n    flexGrow: 1\n  },\n  menuButton: {\n    marginLeft: -12,\n    marginRight: 20\n  },\n  list: {\n    width: 250\n  },\n  avatar: {\n    margin: 10\n  }\n}\n\nexport const Header = withStyles(styles)(({ classes }) => {\n  const [sideMenuOpen, setSideMenuOpen] = useState(false)\n  const toggleSideMenu = () => setSideMenuOpen(!sideMenuOpen)\n\n  const sideList = (\n    <div className={classes.list}>\n      <List>\n        {['Inbox', 'Starred', 'Send email', 'Drafts'].map((text, index) => (\n          <ListItem button key={text}>\n            <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\n            <ListItemText primary={text} />\n          </ListItem>\n        ))}\n      </List>\n      <Divider />\n      <List>\n        {['All mail', 'Trash', 'Spam'].map((text, index) => (\n          <ListItem button key={text}>\n            <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\n            <ListItemText primary={text} />\n          </ListItem>\n        ))}\n      </List>\n    </div>\n  )\n\n  return (\n    <AppBar color=\"primary\" position=\"static\">\n      <Drawer open={sideMenuOpen} onClose={toggleSideMenu}>\n        <div tabIndex={0} role=\"button\" onClick={toggleSideMenu} onKeyDown={toggleSideMenu}>\n          {sideList}\n        </div>\n      </Drawer>\n      <Toolbar>\n        <IconButton\n          className={classes.menuButton}\n          color=\"inherit\"\n          aria-label=\"Menu\"\n          onClick={toggleSideMenu}\n        >\n          <MenuIcon />\n        </IconButton>\n        <Typography variant=\"title\" color=\"inherit\">\n          Guven Kemal Portfolio\n        </Typography>\n        {/* <NavBar /> */}\n      </Toolbar>\n    </AppBar>\n  )\n})\n","import React from 'react'\nimport {\n  CardActionArea,\n  Card,\n  CardMedia,\n  CardContent,\n  Typography,\n  CardActions,\n  Button,\n  withStyles\n} from '@material-ui/core'\n\nconst styles = {\n  card: {\n    maxWidth: 345,\n    margin: 15\n  },\n  media: {\n    height: 140\n  }\n}\n\nexport const MediaCard = withStyles(styles)(({ classes, image, description }) => {\n  return (\n    <Card className={classes.card} raised>\n      <CardActionArea>\n        <CardMedia className={classes.media} image={image} title=\"Contemplative Reptile\" />\n        <CardContent>\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\n            Lizard\n          </Typography>\n          <Typography component=\"p\">{description}</Typography>\n        </CardContent>\n      </CardActionArea>\n      <CardActions>\n        <Button size=\"small\" color=\"primary\">\n          Share\n        </Button>\n        <Button size=\"small\" color=\"primary\">\n          Learn More\n        </Button>\n      </CardActions>\n    </Card>\n  )\n})\n","export default [\n  {\n    image: require('../../assets/contemplative-reptile.jpg'),\n    description:\n      'Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica'\n  },\n  {\n    image: require('../../assets/contemplative-reptile.jpg'),\n    description:\n      'Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica'\n  },\n  {\n    image: require('../../assets/contemplative-reptile.jpg'),\n    description:\n      'Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica'\n  },\n  {\n    image: require('../../assets/contemplative-reptile.jpg'),\n    description:\n      'Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica'\n  },\n  {\n    image: require('../../assets/contemplative-reptile.jpg'),\n    description:\n      'Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica'\n  },\n  {\n    image: require('../../assets/contemplative-reptile.jpg'),\n    description:\n      'Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica'\n  }\n]\n","import * as React from 'react'\nimport { MediaCard } from './MediaCard'\nimport { Grid, withStyles } from '@material-ui/core'\nimport mediaList from './mockedMedia'\n\nconst styles = {\n  root: {\n    flexGrow: 1,\n    margin: '30px 0'\n  }\n}\n\nexport const MediaGallery = withStyles(styles)(({ classes }) => {\n  return (\n    <div>\n      <Grid container justify=\"center\" className={classes.root}>\n        {mediaList.map((media, i) => (\n          <Grid item key={i}>\n            <MediaCard image={media.image} description={media.description} />\n          </Grid>\n        ))}\n      </Grid>\n    </div>\n  )\n})\n","import React from 'react'\nimport { CssBaseline } from '@material-ui/core'\nimport { Header } from './components/header/Header'\n// import { MainHeader } from './components/mainHeader/MainHeader'\nimport { MediaGallery } from './components/mediaGallery/MediaGallery'\n\nconst App = () => {\n  return (\n    <>\n      <CssBaseline />\n      <Header />\n      <div style={{ maxWidth: '1440px', margin: '0 auto' }}>\n        {/* <MainHeader /> */}\n        <MediaGallery />\n      </div>\n    </>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}